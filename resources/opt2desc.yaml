# See https://yaml-multiline.info for various types of quotes
# Some processing on multiline strings happens in arguments.rb too

debug:
  -

screenshot:
  -

help:
  -

add_scales:
  - |
    load these additional scales,
    given as a list of scales separated by comma.
    and show them, e.g. in harmonica-chart in upper half of screen.

    With each scale you may supply a shorthand to be used in
    charts, e.g. 'blues:B'
    
    Note, that this option is already defined in the config-file as
    
      add_scales = chord-i,chord-iv,chord-v

    and the shorthands are 1,4,5; as an option this would read:

      --add-scales chord-i:1,chord-iv:4,chord-v:5

    which you may change to your liking.
  - LIST_OF_SCALES

remove_scales:
  - |
    subtract the holes of
    these scales from the primary one
  - SCALE1,SCALE2,...

no_add_holes:
  - |
    for holes from the primary scale, take remarks,
    colors and scale-name from the additional scales; but 
    do not add any new holes
    
transpose_scale:
  - |
    transpose the scale
    to given key (e.g. d) or by semitones (e.g. 12st).  This can be
    helpful, if you want to practice e.g. the d-major scale on a
    harmonica in key of c. Or, if you want to play e.g. in third
    position, you may transpose by 7st (= perfect fifth).  In any
    case: for a diatonic harmonica your mileage may vary, and some
    holes or notes may be lost in the process
  - KEY_OR_SEMITONES

display:
  - "initial display, ARG can be one of:\n
    <%=$display_choices[0..3].map {|c| c.to_s.gsub('_','-')}.join(', ')%>\n
    <%=$display_choices[4..-1].map {|c| c.to_s.gsub('_','-')}.join(', ')%>"
  - ARG

comment:
  - "initial comment, ARG can be one of one of:\n
    <%=$comment_choices[$mode][0..3].map {|c| c.to_s.gsub('_','-')}.join(', ')%>,\n
    <%=$comment_choices[$mode][4..-1].map {|c| c.to_s.gsub('_','-')}.join(', ')%>"
  - ARG
  
ref:
  - reference hole used e.g. in some displays
  - HOLE

fast:
  - samples for notes are played for half a second only

no_fast:
  - samples for notes are played for one second
  
immediate:
  - show correct sequence of holes right away

no_progress:
  - |
    do not check for correctness of played holes,
    just show, what you play

fast_lick_switch:
  - do not echo action between licks
  
loop:
  - |
    when the sequence has been played correctly, do not advance,
    but rather query the same sequence again; repeat until you press
    RETURN

no_loop:

  - inverse of --no-loop

tags_all:
  - |
    filter licks and keep those
    having ALL of the given tags. For a single tag, this option
    has the same effect as --tags-any
  - TAG1,TAG2,...

tags_any:
  - |
    filter licks and keep those
    having ANY of the given tags (example: --tags-any scales,classic).
  - TAG1,TAG2,...
    
drop_tags_all:
  - |
    filter licks and drop those
    having ALL of the given tags. For a single tag, this option has the
    same effect as --drop-tags-any
  - TAG1,TAG2,...

drop_tags_any:
  - |
    filter licks and drop those
    having ANY of the given tags
  - TAG1,TAG2,...

max_holes:
  - |
    filter licks and keep those, that have
    at maximum this number of holes
  - NUMBER

min_holes:
  - |
    filter licks and keep those, that have
    at minimum this number of holes
  - NUMBER
  
holes:
  - play the sequence of holes, even if a sample is available
  
reverse:
  - play the sequence of holes but reverse it first
  
start_with:
  - |
    the name of the first lick to play;
    accepts the special values 'last' or 'l' to repeat the last lick
    (2l, 3l for earlier licks). Use 'harpwise print licks-history' to 
    get a list of recent licks (including shortcuts like '3l')
  - LICK_OR_L

iterate:
  - |
    how to iterate through all
    selected licks; this can be either 'random' (pick licks at random)
    or 'cycle' (one lick after the other and then again). Both can be
    abbreviated, the default is 'random'.
  - RANDOM_OR_CYCLE

partial:
  - |
    to make the mode 'licks' more
    challenging and to improve the learning result, you may let only
    parts of the recording be played.

    Examples for this option are:

      --partial 1/3@b, 1/4@x or 1/2@e, which would
      play: the first third of the recording, any randomly chosen
      quarter (1/4) of it or the last half (but at least one
      second). 
 
      --partial 1@b, 1@e or 2@x play the given number of
      seconds or holes (1 or 2) at the given position (b=begin,
      x=random, e=end) 

      as a special case --part 0 plays nothing initially.

      This can also be abbreviated as -p 0 and memorized as 'play
      nothing' initially; but of course, when the mode has started,
      you may always request a replay with '.'.
  - PARTIAL_SPEC
  
time_slice:
  - |
    time slice (one of short,
    medium, long) for sensing holes played. In each time slice a
    predefined number of holes can be recognized. The default value is
    'medium', but if your computer is slow, 'long' might be more
    appropriate. If your computer is fast, 'short' might work too,
    which will allow harpwise to follow your playing faster
    (e.g. during warbles).

    However, if you choose 'short' and your computer cannot keep up,
    harpwise will lag behind and show holes only (long) after you have
    played them; in such cases harpwise will issue a warning message
    now and then.

    If lagging occurs, you will get a detailed message on program
    termination, that will allow to judge the situation.
  - SHORT_MEDIUM_LONG

viewer:
  - |
    Method to view images (e.g. of players);
    can be any of:
    <%=get_viewers_desc%>
  - VIEWER
  
terse:
  - |
    Be somewhat less verbose or silent than usual.
    Mostly used for mode print and samples.
  
jamming:
  - |
    When in the main listen-perspective, integrate with
    another instance of harpwise in mode running and
    switch along chords and licks as advised through
    fifo ~/.harpwise/remote_fifo.
    
difficulty:
  - |
    Difficulty of questions asked;
    if you should identify or reproduce one of a set of choices
    (e.g. when hearing intervals), the difficulty usually gives the
    size of the set. A percentage value between 0 an 100, chooses easy
    or hard at random, with e.g. 20 meaning one time in five (i.e. at
    a rate of 20%) 'hard' and four times 'easy'; so larger numbers are
    harder and 100 would be all 'hard'. This option defaults to
    'easy'.
  - EASY_OR_HARD_OR_PERCENT

sharps:
  - |
    When printing notes, prefer sharps (e.g. as)
    
flats:
  - |
    When printing notes, prefer flats (e.g. bf)
    
options:
  - |
    show full list of mode specific options.
    You may call -o with a single argument, in which case
    it will describe the specific option only; e.g.:

      harpwise listen -o --add-scales

    If you use -o without arguments, it will describe all known options:

      harpwise listen -o
      
  - OPTION

scale_prog:
  - |
    Specify a
    list of scales separated by comma, that will be cycled when
    pressing 's'. Only long names of scales are supported here
    (e.g. 'chord-i7', but not '1'). Note, that the standard chords are
    available as scales, so this can be seen as defining a chord
    progression. By default (i.e. if you omit this option) this
    progression would be the main scale and any additional scales
    given by --add-scales.

    The standard 12-bar blues would be:

      --scale-prog
         chord-i7,chord-iv7,chord-i7,chord-v7,chord-iv7,chord-i7

    which wraps around and does not need to specify, the varying
    length of the different scales / chords, because you have to press
    's' at the right point in time.

    There are some predefined progressions (like '12bar' for the
    example above), that you may learn about by invoking

      harpwise print scale-progressions

    Note, that this option can not be specified in your config.

    Unlike the quite similar option --add-scales (available for most
    modes and meant to adjust the harp-display), this option
    (--scale-prog) is primarily meant to accompany you through
    the progression of a song. Also note, that both of these options,
    when given, do adjust the respective other, therefore it is enough
    to specify one of them only.
  - LIST_OF_SCALES

lick_prog:
  - |
    <% if $mode == :listen %>
    show given licks in comment
    (lower part of screen), e.g.
    
      --lick-prog wade,simple-turn

    multiple licks may be separated by comma. These licks can be
    played by pressing '.'. You may e.g. want to specify licks for the
    individual chords and/or turnaround licks this way.

    To use a lick progression defined in your lick file, give (e.g.):

      --lick-prog box1<% else %>
    accepts the name of a lick progression as defined within your
    lick-file; the licks from this progression will then be cycled.

      --lick-prog my-lick-progression

    you may also give a comma-separated list of licks, e.g.

      --lick-prog wade,simple-turn
      
    If you use this option, the tag-options for lick-selection are
    ignored.<% if $mode == :licks %>
    
    Note, that an adhoc lick-progression can always be given as
    arguments on the commandline (space separated) without even using
    this option.<% end %><% end %>    
  - LIST_OF_LICKS
  
no_player_info:
  - |
    Do not print player infos in background

keyboard_translate:
  - |
    translate keys
    from your keyboard into other keys; this is for the main
    listen-perspective only.

    E.g. for mode listen, this specifies two translations, separated
    by ',' (comma), i.e.

      --keyboard-translate TAB=s,RETURN=r

    harpwise accepts the TAB key (which has otherwise no function in
    this mode) and behaves, as if the key 's' has been pressed; in the
    same way it treats RETURN as 'r'. The benefit of this is, that the
    new keys might be easier to press while playing.

    Beware and make sure, that you dont translate keys, that already
    have an important function in harpwise (e.g. 'RETURN=r' for mode
    licks), because these keys would no longer be available for their
    original function.

    Regarding the available names, let the error message be
    your guide (i.e. type: --kb-tr x). If you want to translate
    permanently, you may (as with many options) put it into your
    config.

    In some cases it might be useful to make two keys (s,RETURN) out
    of one (b):

      --kb-tr b=s+RETURN

    see usage of mode licks where this is used to switch
    lick-progression and scale-progression at once by pressing 'b'.

    Note, that in your config.ini you may define
    keyboard_translate_slot1, 2 and 3 and use these slots as
    shorthands on the commandline like this:

      --kb-tr s1

    see the comments in your config for more explanation.
  - LIST_OF_KB_TRANSLATIONS

lick_radio:
  - |
    For playing licks:
    preset controls for endless playing of selected licks random or in
    a loop

paused:
  - |
    For jamming, start up paused,
    so that you have time to prepare, before the backing track
    actually starts

print_only:
  - |
    For 'jam along': instead of playing
    the backing track and waiting for elapsed time, rather be
    silent and print timestamps and actions in fast-forward.
    Do not try to talk with 'harpwise listen' either.
    At the end, produce a list of timestamps, which
    can be checked against e.g. those you may generat with
    'harpwise jam play'.

over_again:
  - |
    For 'jam along': if the backing
    track has ended, restart and play it over again.

wave:
  - |
    choose waveform for generated samples,
    default is 'pluck', which resembles the sound of plucking a
    string; give somthing invalid (e.g. 'x') for full set of
    choices. However, these (e.g. 'sawtooth') sound less natural.
  - WAVEFORM
    