#
# This file contains the global default-configuration for harpwise
#
# Please do not try to modify it; rather override values in
#
#   ~/harpwise/config.yaml
#
# ,which mirrors the structure of this file and will be created on
# first invocation of harpwise.
#


#
# Regarding the overall structure, this file has 8 sections:
#
# The first section [any-mode] defines default values for all modes,
# which may be overriden in one of the sections for the
# individual modes, [listen], [quiz], [licks], [play], [print], [samples].
#
# These 1 + 6 sections together define the interactive behaviour of
# harpwise and may be overridden by commandline arguments: e.g. the
# key 'comment' from this file will only be effective, if no option
# '--comment' is given on the commandline.
#
# Please note, that commandline-arguments have their own documentation
# (available with '-o'), which may supplement the infos given below
# for individual configs.
#
# The final section [general] has values, that can neither be changed
# for idividual modes nor are they available as options. They mostly
# have influence on the inner workings of harpwise.
#


#
# Some Remarks:
#
# Even if you do not change a value here and do not specify it as a
# commandline-argument, you may change its values (at least in many
# cases) interactively, while harpwise is running; type 'h' for help
# on this.
#
# In this file, watch out for keys, that contain an underscore,
# e.g. 'add_scales': their corresponding commandline-argument has a
# minus instead, e.g.  '--add-scales'.
#
# And note, that some commandline-options, e.g. '--partial' or
# '--start-with', cannot be stored in this config, the rationale
# beeing, that they do not lend themselves to beeing set once and for
# all.
#


[any-mode]
  # Type is the second argument on the commandline (after the mode),
  # that may be omitted in some cases, in which it is retrieved from
  # the line below
  type = richter
  # Key is the third commandline argument; define its default
  key = c
  # likewise for scale
  scale = blues

  #
  # Keys, that can also be set as commandline arguments; see e.g.
  # 'harpwise quiz' for a description
  #
  display = chart-scales
  comment = note
  add_scales = chord-i7,chord-iv7,chord-v7
  fast = true
  immediate = false
  loop = true

  # Viewer for pictures (e.g. of players)
  # specify an invalid value (e.g. '--viewer x' on the commandline)
  # to learn about allowed values
  viewer = none

  # Tags for lick selection; interesting for modes licks, play or print
  # Type 'harpwise licks -o' to read their description
  tags_all = 
  tags_any = 
  drop_tags_all = 
  drop_tags_any = 

[listen]
  # Maybe translate the keys RETURN or TAB ? See the
  # corresponding commandline-option for details (invoke with -o)
  # keyboard_translate = TAB=s,RETURN=s
  #
  # there are also three slots (1,2,3) for stored keyboard
  # translations, e.g.:
  # keyboard_translate_slot1 = RIGHT=s+l,UP=S+L,LEFT=ALT-s+ALT-l
  # this may then be used on the commandline like this:
  # '--keyboard-translate slot1' or shorter '--kb-tr s1'
[quiz]
  comment = holes-some
  # see option --difficulty for more details on this
  difficulty = easy

[licks]
  comment = holes-all
  immediate = true
  # Maybe translate the key TAB ? See the corresponding
  # commandline-option for details (invoke with -o)
  # keyboard_translate = TAB=s

  # See above for an explanation of keyboard_translate_slot1 etc.

#
# Nothing special for these two modes, so see [any-mode], e.g. for tags
#
[play]

[print]

[samples]
  # db used for volume clause when generating samples
  # higher values give louder samples
  auto_synth_db = -3
  
# Please note, that there is no section [report], because this mode 
# simply takes all its values from [licks]

[general]
  # When printing notes: use sharps or flats ?
  # We are using  combined config here so we are not analogous
  # to the commandline, which has two options --flats and --sharps.
  # The reason is that below config can be more easily overridden in
  # user config-file
  sharps_or_flats = flats

  
  # The value of time_slice below determines, how often harpwise will
  # detect the hole currently played; it is mostly used to compute
  # buffer sizes for aubopitch; its values can be
  # short, medium and long
  time_slice = medium

  #
  # Remark: Changing any of the values below may lead to unexpected
  # results; your mileage may vary
  #

  # Algorithm used by aubiopitch; see its man page for choices
  # (e.g. yinfft, yinfast, mcomb, ...)
  pitch_detection = yinfast
  
  # The sample rate used to drive aubiopitch and sox
  sample_rate = 48000
