{
    //
    // See the usage-message of 'harpwise jamming' for instructions on how to use this
    // file; in short:
    //
    //                    harpwise jam along 12bar
    //

    //
    // See remarks at the end of file this file, on how to create your own jamming.
    // (once you have tried this one and maybe want a nicer backing track ...)
    //

    //
    // The remaining comments (lots of them) simply explain the individual parameters
    // withing this file; you dont need to read them, if you just want to do this jam.
    //
    // Read on, only if you want to create a new jam.
    //
    
    // Track to play, can be anything playable by sox; %{install_dir} (used below) is the
    // installation-directory of harpwise
    "sound_file": "%{install_dir}/recordings/12bar.mp3",
    "comment": "A 12-bar backing-track and the 3-lick set 'box1'. Each of the licks is one bar long, and matches one of chords I,IV,V. Play each lick as long as it is displayed, e.g. play the first lick four times, then the second lick two times, etc. Note, that always the current, matching chord (scale) is highlighted in the harmonica-chart to hint on holes for improvisation. Play either with a mic or use earphones to help harpwise sense your playing even in the accustic presence of the backing track.",
    // hint for user on how to start harpwise
    "example_harpwise": "harpwise listen c --sc-prog 12bar --lick-prog box1 --jamming",
    // global stretch (> 1) or compress (< 1) all timestamps; use this e.g. if you have
    // slowed down the backing track 
    "timestamps_multiply": 1.0,
    // globally add to all timestamps; value can be negative too (in which case it delays
    // playing); use this e.g. if you want to read the next lick in advance
    "timestamps_add": -0.2,
    // maybe give some extra time to grab your harp before anything starts
    "sleep_initially": 2.0,
    // Use this, if actions and music tend to drift; can be negative too (in which case it
    // is just subtracted from last timestamp) For tracks with slightly uneven tempo, or to
    // make room for a solo, this can also be an array, e.g. [0, 0.2, 0, 12, 0, -0.1], which
    // might also include appropriate messages, e.g. [0, 0.2, 0, [12, "solo"], 0, -0.1]. The
    // last value of this array is reused, if the array is smaller than number of iterations
    "sleep_after_iteration": -0.1,
    //
    // The array "timestamps_to_actions" below is the central data structure of this file.
    // it is an array, where each element has one of these forms:
    //
    //   [timestamp, "message", message, secs_to_show]
    //   [timestamp, "loop-start", message, secs_to_show] 
    //   [timestamp, "keys", key1, key2, ... ]
    //
    // Where:
    //
    // "message" makes the given message appear in "harpwise listen" for secs_to_show
    // seconds; secs_to_show is optional and defaults to 2. In any case the next message
    // given here will override its predecessor, so you rarely need to set this.
    //
    // "keys" sends the given keys to "harpwise listen", mostly for switching scales and
    // licks or for doing a reset initially; hence "l","s","L","S" will be the the most
    // frequent (only ?) choices..
    //
    // "loop-start" is just like "message" but also marks the entrypoint for the second and
    // any further iterations, so that action before "loop-start" are only executed once.
    //
    // 
    // The array timestamps-to-actions will be repeated forever, but from the second
    // iteration on it will start at "loop-start".  This assumes that the chord-structure
    // of your song repeats in a regular fashion too.
    //
    //
    // Messages to be shown (and most other strings), may use these special variables:
    //
    //   %{comment}             :  comment from this file
    //   %{iteration}           :  count of repeats (whole set of actions)
    //   %{iteration_max}       :  total number of iterations (calculated from track length)
    //   %{iteration_duration}  :  duration of one iteration (secs)
    //   %{elapsed}             :  time elapsed (mm:ss)
    //   %{remaining}           :  time remaining of backing-track (mm:ss)
    //   %{install_dir}         :  installation directory of harpwise
    //   %{loop_starter}        :  convenient comment for loop start including iteration, elapsed, etc
    //
    // These variables are updated for each iteration, but keep their values during one.
    //
    "timestamps_to_actions": [
	// Sending "L" and "S" resets licks-progression and scale to their initial value, so
	// that the same instance of "harpwise listen" can be used multiple times
        [0,"keys","L","S"],
        [0,"message","Comment: %{comment}"],
        [-2,"message","In two secs ..."],
	// exactly one loop-start is needed
        [6,"loop-start","%{loop_starter}",4],
        [-2,"message","Chord-change in two secs ...",2],
	// these two keys will switch lick- and scale-progression in unison	
        [18,"keys","l","s"],
        [-2,"message","Chord-change in two secs ...",2],
        [24,"keys","l","s"],
        [-2,"message","Three chord-changes in two secs ...",2],
        [30,"keys","l","s"],
        [33,"keys","l","s"],
        [36,"keys","l","s"],
        [-2,"message","Turnaround in two secs ...",2],
        [42,"keys","l","s"]
    ]
}
// 
//  How to create your own jam ?
//  
//  After some practice with the backing-track 12bar.mp3 you may want to try one of your own
//  backing-tracks. A suitable track needs to have a regular chord-structure, probably with
//  an intro and maybe a solo.
//
//  To make a jam from such a track, you will need to prepare a new json-file using your
//  favorite text-editor plus a few tools described below. For starters you may choose a
//  simple 12-bar track with regular chord-changes (I-IV-I-V-IV-I), so that the structure
//  will be very similar to 12bar.json.
//
//  First, make a copy of 12bar.json, name it after your backing-track and put in the
//  filename of your own track; maybe adjust parameters 'comments' and 'example_harpwise'.
//
//  In addition you will need to adjust the array 'timestamps_to_actions' in your new
//  json-file, so that the timestamps match chord-changes and the turn-around of your track.
//
//  To determine those timestamps for a new track, you may employ 'harpwise jam play' and
//  its ability to jump around in a track and mark timestamps. Press RETURN at chord-changes
//  and turnarounds or jump back 10 secs, if you missed a chord-change. As argument to
//  'harpwise jam play' you may give the json-file or the name of your mp3; the resuling set
//  of timestamps will be displayed and written to disk.
//
//  After putting in your timestamps, you should try your new json with 'harpwise jam along'
//  and check, if the actions executed are in sync with your track. It can be useful to jeep
//  watching the output of 'harpwise jam along' instead of 'harpwise listen' for this
//  check. If necessary, do some overall adjustments:
//
//  - If all timestamps seem to be off by a certain constant amount, try parameter
//    'timestamps_add' (negative or positive)
//
//  - If timestamps tend to drift from turnaround to turnaround, or if there are solos in
//    between, adjust parameter 'sleep_after_iteration'
//
//
//  Once you have gone through these steps, everything should be ready for a new jam:
//
//    Have fun !
//
